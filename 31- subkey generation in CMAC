#include <stdio.h>

// Function to perform left shift on a block
void left_shift(unsigned char *block, int block_size) {
    int i;
    unsigned char carry = 0;
    for (i = 0; i < block_size; i++) {
        unsigned char next_carry = block[i] >> (8 - 1);
        block[i] = (block[i] << 1) | carry;
        carry = next_carry;
    }
}

// Function to XOR two blocks
void xor_blocks(unsigned char *block1, unsigned char *block2, int block_size) {
    int i;
    for (i = 0; i < block_size; i++) {
        block1[i] ^= block2[i];
    }
}

// Function to generate CMAC subkeys
void generate_subkeys(unsigned char *subkey1, unsigned char *subkey2, int block_size) {
    // Initialize block of all zeros
    unsigned char zeros[block_size];
    int i;
    for (i = 0; i < block_size; i++) {
        zeros[i] = 0x00;
    }

    // Generate first subkey
    left_shift(zeros, block_size);
    if (block_size == 8) {
        // Constants for 64-bit block size
        zeros[block_size - 1] ^= 0x1B; // Constant for 64-bit block size
    } else if (block_size == 16) {
        // Constants for 128-bit block size
        zeros[block_size - 1] ^= 0x87; // Constant for 128-bit block size
    }
    for (i = 0; i < block_size; i++) {
        subkey1[i] = zeros[i];
    }

    // Generate second subkey
    left_shift(subkey1, block_size);
    if (block_size == 8) {
        // Constants for 64-bit block size
        subkey1[block_size - 1] ^= 0x1B; // Constant for 64-bit block size
    } else if (block_size == 16) {
        // Constants for 128-bit block size
        subkey1[block_size - 1] ^= 0x87; // Constant for 128-bit block size
    }
    for (i = 0; i < block_size; i++) {
        subkey2[i] = subkey1[i];
    }
}

// Function to print a block
void print_block(unsigned char *block, int block_size) {
    int i;
    for (i = 0; i < block_size; i++) {
        printf("%02X ", block[i]);
    }
    printf("\n");
}

int main() {
    int block_size = 16; // Change this to 8 for 64-bit block size
    unsigned char subkey1[block_size];
    unsigned char subkey2[block_size];

    generate_subkeys(subkey1, subkey2, block_size);

    printf("First Subkey: ");
    print_block(subkey1, block_size);

    printf("Second Subkey: ");
    print_block(subkey2, block_size);

    return 0;
}
