#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to print the Playfair matrix
void printMatrix(char matrix[SIZE][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Function to find the coordinates of a character in the matrix
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch || (matrix[i][j] == 'J' && ch == 'I')) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to encrypt a pair of characters using the Playfair cipher rules
void encryptPair(char matrix[SIZE][SIZE], char a, char b) {
    int row1, col1, row2, col2;

    findPosition(matrix, a, &row1, &col1);
    findPosition(matrix, b, &row2, &col2);

    if (row1 == row2) {
        col1 = (col1 + 1) % SIZE;
        col2 = (col2 + 1) % SIZE;
    } else if (col1 == col2) {
        row1 = (row1 + 1) % SIZE;
        row2 = (row2 + 1) % SIZE;
    } else {
        int temp = col1;
        col1 = col2;
        col2 = temp;
    }

    printf("%c%c", matrix[row1][col1], matrix[row2][col2]);
}

// Function to encrypt a message using the Playfair cipher
void encryptMessage(char matrix[SIZE][SIZE], char *message) {
    int i;
    for (i = 0; i < strlen(message); i += 2) {
        char a = toupper(message[i]);
        char b = (i + 1 < strlen(message)) ? toupper(message[i + 1]) : 'X';
        encryptPair(matrix, a, b);
    }
}

int main() {
    char matrix[SIZE][SIZE] = {
        {'M', 'F', 'H', 'I', 'J'},
        {'K', 'U', 'N', 'O', 'P'},
        {'Q', 'Z', 'V', 'W', 'X'},
        {'Y', 'E', 'L', 'A', 'R'},
        {'G', 'D', 'S', 'T', 'B'}
    };

    char message[] = "Must see you over Cadogan West. Coming at once.";

    printf("Playfair Matrix:\n");
    printMatrix(matrix);

    printf("\nEncrypted Message: ");
    encryptMessage(matrix, message);

    return 0;
}
